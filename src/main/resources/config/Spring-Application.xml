<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<!-- 加载资源文件 -->
	<context:property-placeholder location="classpath:config/DBConfig.properties" />

	<!-- 配置自动扫描包 -->
	<context:component-scan base-package="com.sunway.webcore.service.Impl">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>



	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.jdbcUrl}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />


		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="10000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />


		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />

		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="true" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="-1" />

		<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->

		<property name="defaultAutoCommit" value="true" />

		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<property name="validationQuery" value="select 1 " />
		<property name="filters" value="stat" />
	</bean>

	<!-- <property name="proxyFilters"> <list> <ref bean="logFilter" /> </list> 
		</property> -->
	<!-- <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"> 
		<property name="statementExecutableSqlLogEnable" value="false" /> </bean> -->



	<!-- 配置 SqlSessionFactoryBean -->
	<bean id="SqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
<!-- 		<property name="mapperLocations"> -->
<!-- 			<array> -->
<!-- 				<value>classpath:com/sunway/webcore/**/*.xml</value> -->
<!-- 				<value>classpath:com/sunway/webapp/**/*.xml</value> -->
<!-- 			</array> -->
<!-- 		</property> -->
		<property name="configLocation" value="classpath:config/MyBatisConfiguration.xml" />
	</bean>
		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<!-- 配置扫描包的路径
			如果要扫描多个包，中间使用半角逗号分隔
			要求mapper.xml和mapper.java同名且在同一个目录 
			 -->
			<property name="basePackage" value="com.sunway.webcore.dao"/>
			<!-- 使用sqlSessionFactoryBeanName -->
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
		</bean>
	<!-- 配置事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<tx:annotation-driven transaction-manager="txManager" />
	<!-- aop:config aop:pointcut expression="execution(* com.sunway.webapp.common.service.Interface..*.*(..)) 
		|| execution(* com.sunway.webapp.security.service.Interface..*.*(..))" id="txAdvicePointcut"/> 
		aop:advisor advice-ref="txAdvice" pointcut-ref="txAdvicePointcut" order="1" 
		aop:config -->


	<!-- ================================================== 日志记录的 AOP 配置 ================================================ -->
	<!-- 配置 Service 层日志记录 -->
	<!-- <bean id="serviceLogging" class="com.sunway.webcore.utils.aop.ServiceLogging" 
		/> -->
	<!-- 配置用户操作日志记录 -->
	<!-- <bean id="userOperationLogging" class="com.sunway.webcore.utils.aop.UserOperationLogging" 
		/> <aop:config> <aop:pointcut id="serviceMethodLoggingPointcut" expression="execution(* 
		com.sunway.webcore.service.Impl.*.*(..))" /> <aop:aspect id="serviceLoggingAspect" 
		ref="serviceLogging" order="100"> <aop:before method="loggingMethodInvoked" 
		pointcut-ref="serviceMethodLoggingPointcut" /> <aop:after-throwing method="loggingServiceException" 
		pointcut-ref="serviceMethodLoggingPointcut" throwing="throwable" /> </aop:aspect> 
		</aop:config> <aop:config> <aop:pointcut expression="execution(* com.sunway.webcore.service.Impl.*.*(..)) 
		and @annotation(userOperation)" id="userOperationLoggingPointcut" /> <aop:aspect 
		id="userOperationLoggingAspect" ref="userOperationLogging" order="20"> <aop:after-returning 
		method="loggingUserOperation" pointcut-ref="userOperationLoggingPointcut" 
		returning="returnValue" /> </aop:aspect> </aop:config> -->

	<!-- =============================================== MyBatis MapperScannerConfigure 
		配置 =============================================== -->
	<!-- <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="com.sunway" /> </bean> -->

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
<!-- 		<property name="basePackage" value="com.sunway.webcore.dao" /> -->
		<property name="sqlSessionFactoryBeanName" value="SqlSessionFactoryBean"></property>
		<property name="properties">
			<value>
				mappers=tk.mybatis.mapper.common.Mapper
			</value>
		</property>
	</bean>

	<!-- 通用返回处理 -->
	<bean class="com.sunway.webbase.BaseResponseBodyAdvice"></bean>


	<!--校验器 ，LocalValidatorFactoryBean是spring提供的一个校验接口 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<!-- hibernate校验器 -->
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 指定校验使用的资源文件，在文件中配置校验错误信息，如果不指定则默认使用classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<!-- 校验错误信息配置文件 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- 资源文件名 -->
		<property name="basename" value="classpath:ValidationMessages.properties" />
		<property name="useCodeAsDefaultMessage" value="true" />
		<!-- 资源文件编码格式 -->
		<property name="fileEncodings" value="utf-8" />
	</bean>
	<bean
		class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor" />
</beans>
